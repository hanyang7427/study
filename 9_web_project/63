一、如何开始一个项目
1.学习基本的项目工具的使用
project 用来画 甘特图 里程碑
visio   做项目流程图
manager 思维导图
github
git/svn 代码协同管理工具
2.能够编写合格的项目文档
需求分析：确定客户实际需求，写好给客户签字，当产品按需求做出来，客户如果说不行，就拿出来打他脸
概要设计：用来开发前做整体技术说明价格设计
详细设计：详细说明项目的每个细节
测试文档：如何测试，测试情况，适应环境
项目说明书：给用户，一般体现为操作或者使用的说明，注意事项，简单故障的排除处理
3.整体规划
django + mysql + html + tushare


———————————— 拿到设计给的图片，如何下手 ——————————
1.数据设计
创建几个数据库
每个数据库几个表，表的字段，字段类型
表之间的关联关系
2.有哪些功能(url)
有哪些url：
  打开参照，在参照上找url
3.确定有什么html：
  1.页面上哪些是千年不变的,放到base.html里
  2.很多页面都包含的，写成html，其他页面include进去
  3.特定功能的页面(登录，注册，文章显示，写博客...)
4.url对应哪些html：
———————————— 如何熟悉一个已有的项目 ——————————
看项目文件顺序
settings.py
urls.py
views.py
api.py

settings.py 中主要看 用了哪些中间件 /app/数据库 /静态文件和模板的路径配置 /邮件配置
如果有看不懂配置干什么用,那就去搜
urls.py 中看项目一共有哪些 url
看不懂正则,那就去搜
views.py 和 api.py 就看接口怎么实现





二、如何导入项目
查看settings
创建settings中对应的数据库
migration(或导入sql)
创建超级用户



—————————————————————————————— 下载文件 ——————————————————————————————
先设置media,作为可以下载文件的存储目录
编写views函数，

vi urls.py
from django.views.static import serve
from django.conf import settings
urlpatterns = [
    url(r'^',include('myapp.urls')),
    url(r"^media/(?P<path>.*)$",serve,{'document_root':settings.MEDIA_ROOT},name='media'),
]
vi myapp.urls.py
urlpatterns = [
    url(r'^load_test/$',load_test)
    url(r'^download/$',download_file,name = 'download_file'),

vi settings.py
MEDIA_URL='/media/'
MEDIA_ROOT=os.path.join(BASE_DIR,'media')

vi views.py
#展示文件下载页面
def load_test(request):
    return render(request,'download.html')

# 下载文件，通过文件流的方式
def download_file(request):
    the_file_name = 'test.png'
    filename = 'media/uploads/test.png'
    response = StreamingHttpResponse(readFile(filename))
    response['Content-Type'] = 'application/octet-stream'
    response['Content-Disposition'] = 'attachment;filename="{0}"'.format(the_file_name)
    return response

def readFile(filename,chunk_size = 512):
    with open(filename,'rb') as f:
        while True:
            c = f.read(chunk_size)
            if c:
                yield c
            else:
                break
vi download.html
<p>第一种方法，直接右键将图片另存为即可．但是这种方法只能实现静态文件下载，不能实现动态文件下载</p>
<a href="{%url 'media' 'uploads/test.png'%}">test.png</a>

<p>第二种方法，将链接指向相应的views.py函数实现下载功能</p>
<a href="{%url 'download_file'%}">test.png</a>

<label >test.png</label>
<button onclick="window.location.href='{%url 'download_file'%}'">Download</button>

—————————————————————————————— 发送邮件 ——————————————————————————————
vi urls.py
urlpatterns += [
    url(r'^email/$',email,name='email'),
]
# 1.设置settings
vi settings.py
import getpass
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'sisuo321@163.com'
EMAIL_HOST_PASSWORD = getpass.getpass()
# 2.在views当中使用send_mail函数发送邮件
vi views.py
from django.core.mail import send_mail
def email(request):
    send_mail('Subject here','Here is the message.','sisuo321@163.com',['xxx@xxx.com','xxx@qq.com'],fail_silently=False)
    return HttpResponse('send email ok')

—————————————————————————————— 富文本编辑器 ——————————————————————————————
demo在blog_project
1.下载插件，去除没用的包
http://kindeditor.net
2.将有用的内容整体放到static/js下
3.在settings中配置STATICFILES_DIRS,MEDIA_ROOT
4.编写config.js
5.在html界面，将重要js文件引入
<script type="text/javascript" src="/static/js/kindeditor-4.1.10/kindeditor-min.js"></script>
<script type="text/javascript" src="/static/js/kindeditor-4.1.10/lang/zh_CN.js"></script>
<script type="text/javascript" src="/static/js/kindeditor-4.1.10/config.js"></script>
6.处理图片上传函数，编写URL和views

vi day3/urls.py
from django.views.static import serve
from django.conf import settings
urlpatterns = [
    url(r'^',include('myapp.urls')),
    url(r"^media/(?P<path>.*)$",serve,{'document_root':settings.MEDIA_ROOT},name='media'),
]
vi myapp/urls.py
urlpatterns += [
    url(r'^article/$',article,name = 'article'),
    url(r'^upload/(?P<dir_name>[^/]+)$',upload),
]
# 在settings中配置STATICFILES_DIRS,MEDIA_ROOT
vi settings.py
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static'),
]
MEDIA_URL='/media/'
MEDIA_ROOT=os.path.join(BASE_DIR,'media')
# 编写config.js
vi BASE_DIR/static/js/kindeditor-4.1.10/config.js
KindEditor.ready(function(K) {
                // 或者是K.create('#id_content', {
                K.create('textarea[name=content]',{
                    width:'800px',
                    height:'200px',
                    //配置上传地址，这个地址在url.py中已经配置好了，要和它对应
                    uploadJson: '/upload/kindeditor',
                });
        });
vi article.html
<html>
    <head>
        <meta charset="utf-8">
        <title>写点什么</title>
        <script type="text/javascript" src="/static/js/kindeditor-4.1.10/kindeditor-min.js"></script>
        <script type="text/javascript" src="/static/js/kindeditor-4.1.10/lang/zh_CN.js"></script>
        <script type="text/javascript" src="/static/js/kindeditor-4.1.10/config.js"></script>
    </head>
    <body>
        <div id="content" class='col'>
            <h1>我的文章</h1>
            {%if errors%}
            <ul>
                {%for error in errors%}
                    <li>{{error}}</li>
                {%endfor%}
            </ul>
            {%endif%}
            <form enctype="multipart/form-data" action="" method="post" id="article_form">
            {%csrf_token%}
            <div>
                <label for="id_title">文章标题：</label>
                <input type="text" name="title" maxlength="50" value="{{title}}">
            </div>
            <hr>
            <div>
                <label for="id_desc">文章描述：</label>
                <input type="text" name="desc" maxlength="50" value="{{desc}}">
            </div>
            <hr>
            <div>
                <label for="id_content">文章内容：</label>
                <textarea name="content" id="id_content" value="{{content}}"></textarea>
            </div>
                <input type="submit" value="保存" name="_save">
            </form>
        </div>
    </body>
</html>

vi myapp/views.py
from django.shortcuts import render
from django.http import StreamingHttpResponse,HttpResponse
from django.conf import settings


# Create your views here.
#文章编写界面
def article(request):
    errors = []
    if request.method =='POST':
        if not request.POST.get('title',''):
            errors.append("Enter a title")
        if not request.POST.get('desc',''):
            errors.append("Enter a desc")
        if not request.POST.get('content',''):
            errors.append("Enter a content")
        if not errors:
            return HttpResponse('Thank you...')
    return render(request,'article.html')
import os
import uuid
import json
import datetime as dt
from django.views.decorators.csrf import csrf_exempt
#这个装饰器用于不再进行表单验证提交
@csrf_exempt
def upload(request, dir_name):
    ##################
    # 这是kindeditor想要的格式
    #  kindeditor图片上传返回数据格式说明：
    # {"error": 1, "message": "出错信息"}
    # {"error": 0, "url": "图片地址"}
    ##################
    result = {"error": 1, "message": "上传出错"}
    #imgFile来自于富文本编辑器查看源码之后找到的它定义的文件名字
    files = request.FILES.get("imgFile", None)
    if files:
        result =image_upload(files, dir_name)
    return HttpResponse(json.dumps(result), content_type="application/json")
#目录创建
def upload_generation_dir(dir_name):
    today = dt.datetime.today()
    dir_name = dir_name + '/%d/%d/' %(today.year,today.month)
    if not os.path.exists(settings.MEDIA_ROOT + dir_name):
        os.makedirs(settings.MEDIA_ROOT + dir_name)
    return dir_name
# 图片上传
def image_upload(files, dir_name):
    #允许上传文件类型
    allow_suffix =['jpg', 'png', 'jpeg', 'gif', 'bmp']
    file_suffix = files.name.split(".")[-1]
    if file_suffix not in allow_suffix:
        return {"error": 1, "message": "图片格式不正确"}
    relative_path_file = upload_generation_dir(dir_name)
    path=os.path.join(settings.MEDIA_ROOT, relative_path_file)
    if not os.path.exists(path): #如果目录不存在创建目录
        os.makedirs(path)
    file_name=str(uuid.uuid1())+"."+file_suffix
    path_file=os.path.join(path, file_name)
    file_url = settings.MEDIA_URL + relative_path_file + file_name
    #写入操作，二进制形式，最终完成上传，真正保存图片
    open(path_file, 'wb').write(files.file.read())
    return {"error": 0, "url": file_url}
