IPC inter-process communication 指至少两个进程或线程间传送数据或信号的一些技术或方法
RPC remote procedure call protocol 远程程序调用协议
进程间通信方式
1)*队列:有两个口
FIFO(先进先出)
from multiprocessing import Queue
从multiprocessing 模块导入Queue方法，此方法返回一个Queue对象
>>> multiprocessing.Queue().__class__
<class 'multiprocessing.queues.Queue'>
注意：Queue类在multiprocessing.queues模块中，Queue方法在multiprocessing模块中

q = Queue()
# 如果q为空，q.get()将阻塞，直到队列中有可用项为止
# q.get()从队列中移除并返回一个项目
q.get([block=True,[timeout=None]])
q.get_nowait == q.get(False)
put(obj, block=True, timeout=None)
注：multiprocessing.Queue 和 queue.PriorityQueue的区别
    前者要符合多进程的特性，序列化和反序列化
    序列化和反序列化：对数据做了一些通信上的加工，保证多进程下的安全性
    *multiprocessing.Queue有进程安全性
注：
    put也有timeout，put也会阻塞，因为一个队列在put和get时会锁，如果其他进程频繁put和get，put就会阻塞
2)文件
早期时各种硬件设备都是私有的接口,posix
open,read,write,seek,tell,close
mode:r,w,a,b
# with open('text.txt') as f:(推荐使用)
使用文件实现进程间的通信（一个进程写完文件，另一个进程去取），慢，但最普世
3)管道
管道只有一个缓冲区
管道是单向的(因为管道只有一个缓冲区)，一端收一端发，不用的一端要close
想实现双向的效果，需要两个管道，或使用双工的管道
匿名管道：父子进程
命名管道：没有亲缘关系的进程之间也可以通信

-----------
进程间传递信号

*互斥量
互斥量其实是一种特殊的信号量，特殊在一次只有一个消费者
from multiprocessing import Lock
lock = Lock()
lock.acquire()
lock.release()
lock.acquire()和lock.release()之间的代码，不会被插入其他进程的操作
###############################
# 银行存取款demo lock value
##############################
# from multiprocessing import Process
# from multiprocessing import Value
# from multiprocessing import Lock
# import time
# x.value +1 代表
# 1.取x.value
# 2.计算a = x.value +1
# 3.x.value = a
# 如果没有给 x.value上锁，其他进程对x.value的修改会在123中乱入
# import multiprocessing
# import time
# import threading
# def a(x,l):
#     for i in range(10000):
#         l.acquire()       # 锁要注意最小颗粒度
#         x.value += 1      # 如果没有锁，其他进程对x.value的操作会该语句之间乱入
#         l.release()       # 锁要注意最小颗粒度
#     print(money.value)
# def b(x,l):
#     for i in range(10000):
#         l.acquire()       # 锁要注意最小颗粒度
#         x.value -= 1      # 如果没有锁，其他进程对x.value的操作会该语句之间乱入
#         l.release()       # 锁要注意最小颗粒度
#     print(money.value)
# if __name__ == "__main__":
#     money = multiprocessing.Value('i',1000)   # 进程间的共享Value
#     # lock = multiprocessing.Semaphore(2)     # 两把锁代表有两个进程可以并发执行，结果是乱的
#     lock = multiprocessing.Lock()             # 一把锁最后结果不变
#     p1 = multiprocessing.Process(target=a, args=(money,lock))
#     p2 = multiprocessing.Process(target=b, args=(money,lock))
#     p1.start()
#     p2.start()
#     time.sleep(1)
#     print(money.value)

信号量
s = multiprocessing.Semaphore(2)     # 同时并发两个任务给cpu执行
s.acquire()
s.release()
############################
# 信号量demo
############################
# import multiprocessing
# import time,os
# def consumer(s):
#     s.acquire()
#     time.sleep(1)
#     print("---")
#     s.release()
#     print(multiprocessing.current_process().name + 'release')
# if __name__ == '__main__':
#     # 把信号量值置为2
#     s = multiprocessing.Semaphore(5)
#     for i in range(2):
#         p = multiprocessing.Process(target=consumer,args=(s,))
#         p.start()
#     print("main end")

事件
一个进程通过Event通知另一个进程做某件事情的时机到了，我门就可以做这件事了
例子：一个写程序在多个读的进程中，可以通过这种方式来通知这些进程们
e = multiprocessing.Event()
e.wait([timeout=None])  #阻塞，执行e.set()之后就不阻塞了
e.set()     #置为True
e.id_set()  #返回True False
e.clear()   #置为False

#############################
# 事件 Event demo
#############################
# import multiprocessing
# import time
# def wait_for_event(e):
#     print("wait for event:starting")
#     e.wait()
#     print("wait fro event is_set"+str(e.is_set()))
#
# def wait_for_event_time(e,t):
#     print("wait for timeout event:starting")
#     e.wait(t)
#     # time.sleep(1)
#     # e.set()
#     print("wait fro event time_out is_set" + str(e.is_set()))
# if __name__ == "__main__":
#     e = multiprocessing.Event()
#     # 创建两个进程，第一个是阻塞，第二个是非阻塞
#     # 第二个进程会等待两秒钟信号量
#     w1 = multiprocessing.Process(name = 'block',target = wait_for_event,args=(e,))
#     w2 = multiprocessing.Process(name='non-block',target=wait_for_event_time,args=(e,2))
#     w1.start()
#     w2.start()
#     # 主进程先睡3秒
#     time.sleep(3)
#     e.set()
#     print("main event is set")
----------
socket
...


面试题
实现一个函数f
输入一个整型list
输出一个list，list中的每一个元素除以下标为0的那个元素
坑：除以0怎么办，列表是空怎么办
    1)前置条件：assert
    2)做事：
    3)后置检查：

作业：
    1)使用队列实现生产者消费者模型；生产者生产[0,1,2,3,4,5,6,7,8,9,10],消费者能够在处理完了list序列之后退出
    2)使用互斥锁去完成银行存取款操作，存款1000，A取10次，每次取100,B取5次，每次取200
    3)用面向对象实现第一个作业的第二题(定时器)

##########################################
# 线程 进程 进程池计算完全数运行时间比较 demo
##########################################
import multiprocessing
import threading
import time
def wanquanshu(x):
    L = []
    for j in range(1,x):
        L2 = []
        for i in range(1,j):
            if j % i == 0:
                L2.append(i)
        if sum(L2) == j:
            L.append(j)
    return L
################### ---Pool-apply_async---
t1=time.time()
p = multiprocessing.Pool(2)
p.apply_async(wanquanshu,args=(11111,))
p.apply_async(wanquanshu,args=(11111,))
p.close()
p.join()
print("Pool-apply_async:%s" % (time.time() - t1))
################### ---Pool-map---
t1=time.time()
p = multiprocessing.Pool(2)
print(p.map(wanquanshu,[11111,11111]))
p.close()
p.join()
print("Pool-map:%s" % (time.time() - t1))
#################### ---Process---
t1=time.time()
p = multiprocessing.Process(target=wanquanshu,args=(11111,))
p1 = multiprocessing.Process(target=wanquanshu,args=(11111,))
p.start()
p1.start()
p.join()
p1.join()
print("Process:%s" % (time.time() - t1))
####################---Thread---
t1=time.time()
t = threading.Thread(target=wanquanshu,args=(111111,))
t.start()
t1 = threading.Thread(target=wanquanshu,args=(111111,))
t1.start()
print("Thread:%s" % (time.time() - t1))