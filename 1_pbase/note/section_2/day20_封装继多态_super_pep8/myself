# ———————————————————————————— super多态 ————————————————————————————
class Shape:  # 图形类
    def draw(self):
        self.drawSelf()
class Point(Shape):
    def drawSelf(self):
        print("正在画一个点!")
class Circle(Point):
    def drawSelf(self):
        print("正在画一个圆")
shape = Point()
shape.draw()        # 正在画一个点!
# ———————————————————————————— 查看类的父类 ————————————————————————————
>>> class A():
...     pass
>>> class B(A):
...     pass
>>> B.__base__
<class '__main__.A'>
# ———————————————————————————— 查看实例属于那个类 ————————————————————————————
>>> class A():
...     pass
>>> a=A()
>>> a.__class__
<class '__main__.A'>
# ———————————————————————————— '_' 和 '__' ————————————————————————————
以下划线“_”为前缀的名称（如_spam）应该被视为API中非公开的部分（不管是函数、方法还是数据成员）。
此时，应该将它们看作是一种实现细节，在修改它们时无需对外部通知。
正如上面所说，这确实类似一种惯例，因为它对解释器来说确实有一定的意义，
如果你写了代码“from <模块/包名> import *”，那么以“_”开头的名称都不会被导入，除非模块或包中的“__all__”列表显式地包含了它们

爽下划线开头的属性或方法只能在类内部调用