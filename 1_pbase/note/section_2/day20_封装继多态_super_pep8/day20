day19回顾:
数值转换函数:
  int()       __int__
  float()     __float__
  bool()      __bool__
  complex()   __complex__
  str()       __str__

student_infos = []
if student_infos:  # bool()-->__bool__

__call__ 方法

a = A()
b = a()

in / not in 重写
__contains__ 方法

L = [1,2,3]
if 2 in L:
   if 3 not in L:
      if not 4 in L  # 不建议这样写(最后加括号来确定优先级)


索引／切片重写
 __setitem__
 __getitem__
 __delitem__

slice类型－－－＞切片
int 　类型－－－＞索引

L
i
x
count/cnt  数量
v/val/value 值...
Python 的 PEP8编码规范




迭代器:
range()生成器函数
(x for x in range(10))  生成器表达式

迭代器协议：
　　1. 要有 __next__方法:
  2. 无法取值产生StopIteration异常　

获取迭代器的方法:
    __iter__ 方法,对象用于返回迭代器

异常

with 语句

环境管理器:
  对象要有两个方法:
    __enter__
    __exit__
--------------------------------------------------------------------------
-------------------------------- 以上为前日回顾 ----------------------------
--------------------------------------------------------------------------
day20笔记:
继承(inheritance)　和 派生 (derived)

什么是继承　/　派生
  ...
为什么继承／派生
  继承的目的是延续旧的功能
  派生的目的是在类旧类的基础上添加新的功能

作用：
　　用继承派生机制，可以将一些共有功能加在基类中，实现代码共享.在不改变超类的代码的基础上改变原有功能

名词:
  基类(base class) / 超类(super class) / 父类(father class)
  派生类(derived class) / 子类(child class)

单继承的语法：
　　　class 类名(超类名):
       ...

示例：
　　　human.py

继承说明：
　　任何类都直接或间接的继承自object类
  object类是一切类的超类

__base__属性
  作用：
  　　用来记录此类的基类(类实例)


覆盖 override(也叫重写 overwrite)
什么是覆盖
  覆盖是指有继承关系的类中，子类中实现了与基类（超类)同名的方法，在子类实例调用该方法时，实际调用的是子类中的覆盖版本，这种现在叫做覆盖．


子类对象显示调用基类方法的方式：
　　　基类名.方法名(实例, 参数)


super函数
  super(type, obj) 返回绑定超类的实例(要求obj必须为type类型的实例)
  super()  返回绑定的超类的实例,等同于(class, 实例方法的第一个参数),此方法必须用在方法内部

作用:
  返回绑定超类的实例,用超类的实例来调用其自身的方法


示例见: super.py


用于类的函数:

issubclass(cls, 类 或 类元组) 判断一个类是否是继承自其它的类,如果此类cls是类(class) 或 元组中的一个派生子类,则返回True, 否则返回False

示例:
class A:
    pass

class B(A):
    pass

class C(B):
    pass

class D(B):
    pass

issubclass(C, A)  # True
issubclass(C, B)  # True
issubclass(A, C)  # False
issubclass(C, D)  # False


查看:
  >>> help(__builtins__) 可以查看所有内建类的帮助



显式调用基类的构造方法:
  def __init__(self, ....):
      ....


多态 polymorphic
什么是多态:
  字面意思 "多种状态"
  多态是指在有继承/派生关系的类中,调用基类对象的方法,实际能调用子类的覆盖方法现象叫多态

多态调用的方法与对象相关,不与类型相关

示例见:poly.py


面向对象思想的特征:
  1. 封装
  2. 继承(派生)
  3. 多态

class OrderSet(list):
    def add(self, n):
        for i in range(len(self)):
             self[i] += n

L = OrderSet()
L.append(10)
L.append(18)



封装 enclosure

作用:
  封装是指隐藏类的实现细节,让使用者不关心这些细节.
注:
  Python的封装是假的(模拟的)封装

私有实例变量和方法:
  Python类中,以双下划线"__"开头,不以双下划线结尾的标识符为私有成员
  私有成员分为:
     私有属性和私有方法
  私有成员在子类和类外部无法访问


多继承 multiple inheritance
   多继承是指一个子类继承自两个或两个以上的基类

多继承的语法:
  class 类名(超类名1, 超类名2, ...):
      ...

示例见:
  multi_inherit.py

多继承的问题(缺陷)
  标识符冲突的问题
     要谨慎使用多继承


Python编码规范:

PEP8 编码标准
代码编写:
  1.使用4个空格进行退进,不使用TAB,更不允许用TAB和空格混用
  2. 每行最大长度79字节,超过部分使用返斜杠折行
  3. 类和全局函数定义间隔两个空行,类内方法定义间隔一个空行,其它地方不加空行

文档编排:
  1.import 部分 按标准,三方和自己编写的顺序依次排序,之间空一行
  2.不要在一句import 中导入多个库模块,如:
    import os, sys, time应写成多行
  3. 尽可能用import XX 需不用from XX import YY 引用库,因为可能出现名字冲突.

空格的使用:
  1. 各种右括号前不用加空格
     L = [1, 2, 3]  # OK
     L = {1, 2, 3 }  # } 前不要加空格
  2. 逗号,冒号,分号前不要加空格
  3. 函数左括号前不要加空格
  4. 操作符左右各加一个空格,不要为了对齐增加空格
  5. 函数的默认参数使用的赋值符左右省略空格
  6. 不要将多句语句写在同一行,尽量不要加用;
  7. if/for/while语句中,即使执行语句只有一句,也必须另起一行 
 
　

练习：
　　 图形类Shape有方法：
　　　　　　draw(self)  画图形
      move(self, offx, offy)  将图形移动从标系的(offx,offy) 位置

　　　再定点类Point, 圆类Circle, 线类Line, 矩形类Ractange 直接或间接继承自Shape类

所有的类方法有　draw, move
属性如下：
　　点:  x, y
  圆:  x, y, r(半径)
  线类  x, y, x2, y2
  矩形：　x, y, width(宽), height(高)

用这些类创建一些对象放入列表中:
如：
docs = [Point(1, 2), Circel(3,4,5), 
        Line(6,7,8,9),
        Ractange(10, 20, 50, 100)]
for x in docs:
    x.draw()

#　让所有图形都向右移动10个像素,向下移动20个像素
for x in docs:
    x.move(10, 20) 
# 再次打印图形:
for x in docs:
    x.draw()



class Circel:
    def draw(self):
       print("圆(", self.x, self.y, self.r, ")")











