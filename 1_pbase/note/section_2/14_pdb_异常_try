python调试器pdb模块
pdb模块：
    pdb是一个模块，主要用于调试程序
    作用：
      1、可以让程序单步执行并跟踪程序的执行流程
      2、可以在运行时查看变量的值
      3、控制让程序的执行流程
    pdb.set_trace()方法：
      作用：
        pdb.set_trace()下边的代码进入调试器
      语法：
        import pdb
        ...
        pdb.set_trace()
        ...
      pdb调试命令：
        q/quit      退出pdb调试器
        l/list      列出源码
        h/help      查看pdb帮助
        p/pp表达式   运行表达式并返回结果，临时执行一句
        n/next      执行下一条语句
        c/cont/continue     继续一直执行，直到下一个断点
        b/break断点位置      设置断点
        cl/clear断点号       清除断点
        s/step      进入到函数内部(下一行为函数调用(非函数定义)时，进入函数，n为只返回函数执行结果)
        r/return    持续执行，直到此函数返回
        w/where     打印函数调用栈(当断点设置为函数时，c后进入函数，不知道时谁调用的，where可以找到)
        run [命令行参数]
      pdb断点的设置方法：
        1、文件名:行号pip
           (Pdb) b test_pdb.py : 19
        2、当前文件的行号
           (Pdb) b 19       # 等同于 b test_pdb.py : 19
        3、函数名
           (Pdb) b f1       # 所有执行f1处都是断点，c后进入f1
        4、模块名
           (Pdb) b contra.play
    控制台下的pdb调试：
      格式：
        $ python3 -m pdb xxx.py
      注：
        xxx.py内部不需要import pdb 和 set_trace
异常(基础)：
    什么是错误：
      逻辑或者语法错误等导致程序无法继续执行
    什么是异常：
      异常是程序出错时标识的一种状态，当异常发生时，程序不会再向下执行，而转去调用此函数的地方，
      待处理相应的错误并恢复为正常状态
    try语句(此语句有两种写法)
      try/except/else/finally语句：
        语法：
          try:
              可能触发异常的语句
          except 错误类型1 [as 变量1]:
              异常处理语句1
          except 错误类型2 [as 变量1]:
              异常处理语句2
          except (错误类型3,错误类型4,...) [as 变量3]
              异常处理语句3
          ...
          except:               # except什么都不加表示匹配所有类型的错误
              异常处理语句other
          else:                 # 没有任何错误发生执行else，有错误不会执行else
              未发生异常语句
          finally:              # 一定会被执行
              最终语句
        语法说明：
          except子句可以有一个或多个(至少有一个)
          as子句是用于绑定错误对象的变量(代表将详细错误提示绑定到变量)，可以省略
          else子句最多只能有一个，可以省略
          finally子句最多只能有一个，可以省略
        注意⚠️：
          在def内的异常，会把异常传递到上层
          try语句块里的语句，一旦出现异常，下边的语句不会执行，异常处理完成后，执行try语句的下一条语句
          例：
            def f():
                try:
                    raise Exception("404 ERROR")
                except ZeroDivisionError:   # 捕获不到ZeroDivisionError错误，将错误传递到上层
                    pass
            try:
                f()
            except Exception as err_obj:     # 捕获到传递来的Expection错误
                print("捕获到错误：" err_obj)
      try/finally 语句：
        语法：
          try:
            可能触发异常的语句
          finally:
            最终语句
        说明：
          1、finally子句不可以省略
          2、一定不存在except子句
          3、可以有else
        作用：
          通常用try和/finally语句来做触发异常时必须要处理事情，无论异常是否发生，finally都会执行
        注：
          try/finally语句不会改变程序的(正常/异常)状态
          except(捕获错误并处理)才会把程序的状态改为正常
      try的嵌套：
        例：
          try:
              try:
                  d = intinput(("输入数字："))
                  d = 3 / d
              finally:
                  print("内部finally已执行")
          except:
              print("有异常")
          finally:
              print("外部finally已执行")
      raise语句：
        作用：
          生成一个错误，让程序进入异常状态
        语法：
          raise 异常类型
          raise 异常对象
        例：
          Exception("some error notice")
             ⬆️              ⬆️
           异常类型         异常对象

Python中的错误类型：
    ZeroDivisionError     除(或取模)零
    StopIteration         迭代器没有更多值
    OverFlowError         数值运算超出最大限制
    IOError               输入/输出操作失败
    ImportError           导入模块错误
    GeneratorExit         生成器发生异常来通知退出
    IndexError            序列没有此索引
    FloatingPointError    浮点计算错误
    IndentationError      缩进错误
    ValueError            传入无效的参数
    AssertionError        断言语句失败
    NameError             未声明/初始化对象
    AttributeError        对象没有这个属性
    KeyboardInterrput     用户中断执行(通常是ctrl+c)
      更多见：>>>help(__builtins__)