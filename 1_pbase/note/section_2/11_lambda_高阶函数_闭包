lambda表达式(匿名函数对象)：
    作用：
      创建一个匿名函数对象，同def类似，但不提供函数名
    语法：
      lambda [参数1,参数2, ...]:表达式
      注：[]表示可以省略
    例1：
      def myadd(x,y)
          return x+y
      改写为：
      myadd = lambda x,y : x+y
    例2：
      def operator(fn,x,y):
          return fn(x,y)
      print(operator(lambda a,b:a+b , 100,200))
      print(operator(lambda a,b:a*b , 100,200))
    语法说明：
      lambda只是一个表达式，它用来创建一个函数对象，当lambda表达式执行时，返回的是冒号(:)后表达式的值
      lambda表达式创建的函数智能包含一条语句(必须在一行)
      lambda比函数简单而且可以随时创建和销毁，有利于减少程序的耦合度(密切关系程度或相互依赖程度)

globals() / locals()函数：
    globals()返回当前全局作用域内变量的字典，使用该功能可以获取全局变量或在函数内部改变全局变量
    例：
      { __name__ : __main__, __file__ : filename.py }
    locals()返回当前局部作用域内变量的字典
eval()函数：
    eval()函数作用：
      把一个字符串当成一个表达式来执行，返回表达式执行结果
    eval()格式：
      eval(source,globals=None,locals=None)
    例1：
      x = 100
      y = 200
      prtin(eval("x+y"))
    例2：
      local_scope = {"x":5,"y":10}
      a = eval("x+y",{},local_scope)
    注：
      指定和globals或locals后，相当于给eval分配环境变量
exec()函数：
    作用：
      把一个字符串当做程序来执行
    格式：
      exec(source,globals=None,locals=None)     # 表示globals和locals默认为None
                                                # 不表示globals和locals是关键字参数
                                                # globals和locals是位置参数
                                                # globals和locals指定语句的环境变量
    例1：
      x = 100
      y = 200
      s = "print('hello:', x+y)""
      exec(s)
    例2：
      gs = {"x":10,"y":20}
      ls = {"x":1,"y":2}
      exec("z = x+y",gs,ls)
      print(ls)                         # {"x":1,"y":2,"z":3}
练习：
  自己写一个程序的解释执行器，解释我们自己输入的程序
  $ ./myprog
  请输入程序:>>>> x = 100<回车>
  请输入程序:>>>> y = 200<回车>
  请输入程序:>>>> print("x+y",x+y)<回车>
  x+y=300
  提示：用exec(函数实现)

闭包closure：
  将组成函数的语句和这些语句的执行环境打包在一起时，得到的对象为闭包，闭包是一种特殊的函数
  说明：
    如果一个内嵌函数访问函数外部作用域的变量，这个外部函数返回内部函数，则这个函数就是闭包
  例：
    def count():
        L = []
        i = 1
        def f():
            return i ** i
        fs.append(f)           # L 添加f，注意没有执行i ** i
        i = 2            <--------------------------------------+
        def f():                                                |
            return i ** i                                       |
        fs.append(f)           # L 添加f，注意没有执行i ** i       |
        return L               # 闭包里的变量i值为2----------------+
    f1,f2=count()
    print(f1(),f2())       # f1(),f2()都是4
    1、内层函数使用了外层函数的变量
    2、外层函数return了内层函数，注意return只返回了函数本身并没有执行，只有出现f()才执行
    3、return的函数叫做闭包，闭包中包含了外层函数的变量，采用的外层函数变量值为return时的值

函数式编程：
    是指用一系列函数解决问题
    函数是一等公民
    函数式编程好处：
      每一个函数完成细小的功能，一系列函数的任意组合可以完成大问题，函数仅接受输入并产生输出，不包含
      任何可能影响输出的内部状态
    函数的可重入性：
      可重入性是指输入一定，则输出必须一定
    优点：
      易于测试，易于调试，更高的生产率，模块化，逻辑可证
高阶函数：
    满足下列条件中的一个的函数即为高阶函数：
    1、函数接受一个或多个函数作为参数传入
    2、函数返回一个函数
    内置的(buildins的高阶函数)：
      map, filter, sorted
      map函数：
        map(func, *iterable)用函数的可迭代对象中的每一个元素作为参数计算出新的可迭代对象，当最短
        的一个可迭代对象完成迭代后，此迭代器生成结束(最终生成迭代器)
        注：*iterable代表所有(*)可迭代对象(iterable)
        例：
          # 生成一个迭代器，此迭代器可以生成1*4, 2*3, 3*2, 4*1
          def mymul(x,y):
              return x*y
          mit = map(mymul,[1,2,3,4],[4,3,2,1])
          [x for x in mit]
        例：最短的可迭代对象结束就结束了
          L = [x for x in map(pow,[1,2,3,4],[1,2])]
      filter函数：
        filter(function or None,iterable)
        作用：
          筛选序列中的数据，返回一个可迭代对象，此可迭代对象将对iterable对象进行筛选
        说明：
          function将对iterable中的每个元素进行求值，返回False则将此数据丢弃，返回True则保留
        例：
          L = [x for x in range(10)]
          def isodd(x):         # 返回奇数
              return x % 2 ==1
          L2 = [x for i in filter(isodd,range(10))]
      sorted函数：
        sorted(iterable, key=None, reverse=False)
        key传入函数
        作用：
          将原可迭代对象的数据进行排序，生成排序后的列表
        说明：
          key函数用来提供一个值，这个值将作为排序的依据
        例：
          L = [5,-2,-4,0,3,1]
          L2 = sorted(L)
          L2 = sorted(L,reverse=True)
          L2 = sorted(L,key=abs)            # 取绝对值再排序
递归函数recursion
    函数直接或间接的调用自身
      说明：
        递归一定要空值递归的层数，当符合某一条件时要终止递归调用，几乎所有的递归都能用while循环来代替
      优缺点：
        优点：可以把问题简化，让思路更清晰，代码更简洁
        缺点：递归因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果
      用途：
        文件查找
        扫雷游戏
      例：
        def myfac(n):
            if n == 1:
                return 1
            return n * myfac(n - 1)
      思路：
        5!
        5 * 4!
        5 * 4 * 3!
        5 * 4 * 3 * 2!
        5 * 4 * 3 * 2 * 1!

练习：
    1、用filter函数将1~100之间的所有素数prime放入到列表中并打印
    2、用递归方式计算1+2+3+...+n的和
    def mysum(n):
        ...     # 此处自己实现
    3、用函数式编程，算出1~20的阶乘的和
    1!+2!+3!+4!+5!+6!+7!+...+20!
    4、改写之前学生信息的程序
       每个人的信息有：
         姓名：name
         年龄：age
         成绩：score
       输入5个学生的信息，然后做如下操作：
       1)成绩降序
       2)年龄降序
       3)年龄升序
       4)按原来输入顺序打印学生信息(要保持原列表不变)