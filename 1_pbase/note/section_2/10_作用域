函数的传参实质是：
    将形参绑定到 实参所绑定的对象


可变类型参数传入函数和不可变类型参数传入函数的区别：
    不可变的类型的数据作为函数参数传入时，函数内部不会改变变量的原数据值，是安全的
    可变类型的数据作为参数传入时，函数内部可以改变原数据，多用来返回更多数据结果
    例：
      # L变为[10]            |         # L依然为空
      L = []                |         L = []
      def f(x):             |         def f(x):
          x.append(10)      |             x = 10
      f(L)                  |         f(L)
      print(L)              |         print(L)

函数嵌套：
    函数嵌套是指一个函数里用def语句来创建其他函数的情况
    注意：内嵌函数只存在于函数内部，外部不能直接调用
    例：
      def fn_outer():        # 外部函数
          print("外部函数被调用")
          def fn_inner():    # 内部函数
              print("fn_inner被调用")
          fn_inner()
          print("外部函数调用结束")
函数变量：
    函数名是一种变量，在创建函数时，函数名绑定一个函数
    例：
      def fn():
          print("hello world")
      f1 = fn
      f1()      # 等同于调用fn

函数作为函数的返回值：
    例：
      def getfn():
          def print_hello():
              print("hello")
          return print_hello

函数作为实参传递给函数：
    例：
      def tab(x,y):
          print('|'+x.center(13)+'|'+y.center(13)+'|')
      def string(x,y):
          print("姓名："+x+"年龄："+y)
      def myprint(fx,x,y):
          fx(x,y)
      myprint(tab,"tarena","15")

全局变量和局部变量：
    局部变量：定义在函数内部的变量(包含函数参数)
    全局变量：定义在函数外部，模块内部的变量

    v =100
    def fn(v):
        v = 200
        print(v)

作用域：
    作用域也叫名字空间，是变量访问的时候查找变量名的范围空间

    四个作用域：
      局部作用域(函数内)                # L Local
      外部嵌套函数作用域                # E Enclosing function locals
      函数定义所在模块(文件)的作用域      # G Global(module)
      Python内置模块作用域             # B Builtin(Python)
    变量名的查找规则：
      在访问变量时，现查找函数内，然后是包裹此函数的外部函数的函数内部变量，之后全局变量，最后是Buildin
      L --> E --> G --> B
    例：
      max1() = max               # max为Buildin函数(函数名相当于变量)
      v1 = 100                   # Global
      def outer():
          v2 = 200               # Enclosing function locals
          def inner():
              v3 = 300           # Local
              max1(v1,v2,v3)     # L范围内没有定义max1，会像外找，最终在G范围内找到max1
                                 # 这就是为什么内置函数(如max())可以在任意位置调用

    在默认情况下，变量赋值会创建或修改本地变量
global语句：
    作用：
      告诉解释器，global语句声明的一个或多个变量，这些变量的作用域为模块级的作用域，也称作全局变量
      对全局声明的变量赋值时，将映射到模块的内部作用域(E,L)
    语法：
      global 变量1, 变量2
    说明：
      1、全局变量如果要在函数内部被赋值，则必须经过全局变量声明，否则被认为是局部变量
      2、全局变量在函数内部不经过声明就可以直接访问(前提是变量已经存在)
      3、不能现声明局部变量，再用global声明为全局变量，此做法不符合语法规则
      4、global变量名不能出现在此作用域的参数列表里，for循环控制目标，类定义，函数定义及import导入名字中
      例：错误示例(不能先用在声明)
        def fn():           def fn(v):
            v = 1               global v
            global v
nonlocal语句：
    作用：
      告诉解释器，nonlocal声明的变量不是局部变量也不是全局变量，而是外部嵌套函数(Enclosing)内的变量
      也就是说nonlocal声明的变量的作用范围为上层内的所有层(包括上层)
    说明：
      1、nonlocal语句必须在Local内使用
      2、访问nonlocal变量将对外部嵌套函数的作用域内的变量进行操作
      3、当有两层或两层以上的函数嵌套时，访问nonlocal变量只对最近一层的变量进行操作
      4、nonlocal语句的变量列表里的变量名，不能出现在作用域的参数列表中
      5、nonlocal所在层的上层必须有该变量
    语法：
      nonlocal 变量1, 变量2