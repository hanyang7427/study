系统模块 sys：
    与系统相关的信息
    属性：
      sys.path      模块的搜索路径 path[0] 是当前脚本程序的路径名，或者是""
      sys.modules   已加载的模块的字典
      sys.version   版本信息
      sys.version_info  版本信息的命名元组
      sys.argv      命令行参数argv[0]代表当前脚本
      sys.corpright     获取python版权相关信息
      sys.buildin_module_names  获取python内建模块名称(字符串元组)
    方法：
      sys.exit([code])  退出程序，正常退出时sys.exit(0)
      sys.getrecursionlimit()   得到递归的层次限制值
      sys.setrecursionlimit()   设置递归的最大层次限制值
导入自己的模块：
    import mymodule
    注意：模块是一个变量，所以mymodule不能为数字，所以*.py的名字不能有数字
    作用：
      导入之后 mymodule.py中定义函数，变量都可以在当前文件使用
模块的搜索路径：
    查找的顺序：
      #1、sys.buildin_module_names
      #2、sys.path提供的路径
      #3、搜索程序运行时路径(当前路径)
    技巧：
      在.bash_profile中加入export PYTHONPATH = '/path/to/modules'
      多个path使用:隔开
      每次启动python3，sys.path中都包含/path/to/modules，避免每次都添加
    注意：import 可以使用绝对路径或相对路径导入
模块的加载过程：
    1、在模块导入时，模块内的所有语句会执行
    2、如果一个而模块已经导入，再次导入时，不会重新执行模块内的语句
模块化编程的优点：
    1、有利于多人开发
    2、使代码易于维护
    3、提高代码复用率
    4、模块化编程有助于解决函数名和变量名冲突问题(导入模块后使用函数需要使用模块名.函数名)

模块的属性：
    __name__属性：
      用来记录模块自身的名字
      对于被导入的模块，模块名为去掉后缀(.py)后
      对于被执行的主模块，模块名为__main__
      技巧：通过判断__name__ == "__main__"判断是不是主模块
    __doc__属性：
      用来绑定模块的文档字符串
    __all__属性：
      作用：
        当用from import * 语句导入模块时，只导入__all__列表内的变量(属性)
        使用import module语句导入时，__all__不起作用
        __all__是一个列表，元素为变量名(需要加引号)
        __all__ = [ "变量1", "变量2" ]
    __file__属性：
      __file__用来记录模块对应的文件路径
    模块的隐藏属性：
      模块中以'_'或'__'开头，不以'__'结尾的属性
      在用from import * 语句导入时，将不被导入到其他模块
      例：
        _a __a  def _h():pass  def __h():pass
模块的文档字符串是模块中第一行出现的没赋值给变量的字符串
函数的文档字符串是函数中第一行出现的没赋值给变量的字符串
    访问模块或函数的文档字符串：
      help()
      fn.__doc__
      mymodule.__doc__
      mymodule.fn.__doc__

标准库模块
随机模块 random
    假设导入：
      import random as R
    函数：
      R.random()            返回一个[0,1)之间的随机数
      R.getrandbits(nbit)   以长整型的形式返回用nbit为来表示的随机数
      R.getrandbits(1)      0~3
      R.uniform(a,b)        返回[a,b)区间内的随机数
      R.randrange([start],stop,[,step]) 返回range(start,stop,step)中的随机数
      R.choice(seq)         从序列中返回随意元素
      R.shuffle(seq)        随机指定序列的顺序(乱序序列)
      R.sample(seq,n)       从序列中选择n个随机且不重复的元素(下标不重复下标随机)
    例：
      import random as R
      print(R.random())

练习：
    猜数字游戏，随机生成一个0~100之间的整数，保存在变量x内，让用户输入一个数y，输出猜数字的结果：
    如果y等于x，提示"猜对了"，并退出
    如果y大于x，提示"大了"，并继续猜，若干y小于x，提示"小了"，并继续猜
    知道才对为止退出程序，并显示用户猜的次数

包(模块包) package：
    定义：
      包是将模块以文件夹的组织形式进行分组管理的方法
    作用：
      将一系列模块进行分类管理，有利于防止名字冲突
      可以在需要时加载一个或部分模块而不是全部模块
    定义方式：
      一个包含__init__.py文件的目录为package
    __init__.py文件：
      作用：
        表示所在目录是一个包，在包被加载时自动执行次文件(重复导入不会重复执行)
        1、在内部填写包的文档字符串
        2、加载此包所依赖的一些模块或其他包(通过在__init__内加入import语句)
    __init__.py内的__all__属性
      作用：
        用来记录哪些包需要导入
        当用from 包 import * 语句导入模块时，只查找__all__中所列出的模块或包
        __all__属性只在from import * 语句中起作用
    加载：
      import 包名 [as 包别名]
      import 包名.模块名 [as 模块别名]
      impirt 包名.子包名.模块名 [as 模块别名]

      from 包名 import 模块名 [as 模块新名]
      from 包名.子包名 import 模块名 [as 新模块名]
      from 包名.模块名 import 函数或变量 [as 函数或变量别名]
      注:
        不能直接import函数
        import package.mymod    正确
        import package.mymod.fn 错误
    包的加载路径：
      同模块相同，设置方法：
        1、设置sys.path
        2、设置PYTHONPATH环境变量
    模块的加载过程：
               编译          解释执行
      menu.py  -->  menu.pyc  -->  python3
                  __pycache__/
    pyc文件的作用，当模块没有改变时，直接importpyc文件，提高效率
练习：
    有0~9是个数字，分别放到4个盒子内(列表中的四个元素，不能重复)
    比如：[4,6,0,3]
    让用户每次输入四个数字：
    4 6 0 3 <回车>输入全对，退出
    4 6 0 1 <回车>输出3A0B(A代表位置对，数字也对，B代表数字对，位置不对)
    1 0 4 6 <回车>输出0A3B
    知道才对为止

    模拟斗地主发牌
    扑克牌54张
    黑桃('\u2660') 梅花('\u2663') 方块('\u2665') 桃('\u2666')
    A 2~10 JQK 大小王
    每个人发17张牌，底牌留三张：
    输入回车，打印第一个人的17张牌
    输入回车，打印第二个人的17张牌
    输入回车，打印第三个人的17张牌
    输出回车，打印三张底牌

    已知有5个人
    第五位比第四位大2岁
    第四位比第三位大2岁
    第三位比第二位大2岁
    第二位比第一位大2岁
    第一位说他10岁
    写程序算出第五位多少岁
    用递归

