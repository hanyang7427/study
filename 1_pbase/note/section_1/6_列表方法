列表list：
    定义：
      列表是由一系列特定元素组成的，元素之间可能没有任何关联，但他们之间有先后顺序关系
      列表可以改变各个元素的值，是一中容器
    空列表：
      L = []
      L = list()
    创建非空列表：
      L = [1, 2, 3, 4]
      L = ["Beijing, "Shanghai", "Shenzhen"]
    列表生成函数：
      list()            生成一个空列表，等同于[]
      list(iterable)    用可迭代对象初始化一个列表
      例：
        L = list("hello")   # 使用"hello"这个可迭代对象生成一个列表
        ['h', 'e', 'l', 'l', 'o']
    列表的运算：
      算数运算：
        + += * *=
        +   用于拼接列表
        +=  用于原列表与右侧列表拼接，绑定到变量
        *   用于生成重复的列表
        *=  用于生成重复的列表，绑定到变量
      列表的比较运算：
        > >= < <= == !=
        [1] < ["a"]     # 整型和字符不能比较
    列表的in/not in：
      x = [1, 'two', 3.0, "four"]
      3 in x        # False
    列表的基本操作：
      索引index：
        语法：
          列表[索引]
        作用：
          等同于字符串的索引
    可变的列表：
      列表对象时可变的，通过索引赋值改变列表的元素
      例：
        x = [1, 2, 3, 4]
        x[-1] = 4.0
    列表嵌套：
      L1 = [10, 20, 30]
      L2 = [1, L ,2]
    切片(slice)：
      语法：
        [:] [::]
        列表的切片的规则等同于字符串的切片规则
      注：
        切片下标可以超出索引范围
        x[0:100]
    切片赋值：
      切片赋值可以改变元列表的排列及插入删除数据，列表中可以用切片改变列表对应元素的值
      例：
        L = [1, 2, 3]
        L[0] = [1.1,1.2]          # L变为[1.1, 1.2, 2, 3]
        L[-1:-2:-1] = [2,3,4]     # L变为[1.1 ,1,2, 2, 3, 4]
      注意：
        当步长大于1或为负数时，赋值长度不能超出切片的长度，步长为1时赋值得长度可以大于切片长度
        [start:stop] stop指stop前一个值，注意步长为负数时前一个值选择要按步长方向找前一个
        [1:1]指向空元素时，出现空隙，步长为负数没有空隙
    python3中列表的常用方法：
      语法：
        见help(list)
      L.index(x,[,begin[,end]]) 返回对应元素的索引下标，begin位开始索引，end为结束索引
      L.insert(index,obj)       将某个元素插放到列表中指定的位置
      L.count(x)                返回列表中元素的个数
      L.remove(x)               从列表中删除第一次出现在列表中的值
      L.copy(x)                 复制此列表(只复制一层，不进行深层复制)
      L.append(x)               在列表尾部添加单个元素
      L.extend(lst)             向列表追加另一个列表
      L.clear()                 清空列表，等同于L[:] = []
      L.sort(reverse=False|True)将列表的顺序按值的小到大|大到小顺序进行排列
      L.reverse()               列表反转
      L.pop([index])            删除索引对应的元素，如果不加索引，删除最后元素，同时返回移除元素
    列表嵌套和浅拷贝：
      L = [10, 20, 30]
      L1 = [1, L ,2]
      L2 = L1.copy()        # L2变成[1, [10,20,30] ,2]
      修改L1后，L2不会变
      修改L后，L2会变
    复制列表：
      浅拷贝(shallow cpoy)：
        L.copy()
        L[:]        # 切片复制是浅拷贝
      深拷贝(deep copy)：
        将对象逐层复制(复制后的对象完全独立)
        import copy             # 导入copy模块
        L = [10, 20, 30]
        L1 = [1, L, 2]
        L2 = copy.deepcopy(L1)  # 调用深拷贝函数进行复制
        L[2] = 20.0             # 改变L后，L2不会改变
    del运算符用于删除列表中的元素
      例：
        cityes = ["北京", "上海", "深圳", "天津"]
        # 删除"深圳"
        cities.remove("深圳")
        cities.pop(2)
        del cities[2]   # 删除列表中的元素
    列表推导式(list comprehension)：
      列表推导式使用可迭代对象，依次生成列表内元素的方式
      语法：
        [表达式 for 变量 in 可迭代对象]
        或
        [表达式 for 变量 in 可迭代对象 if 条件表达式]
      例：
        # 生成[1, 4, 9, 16]
        L = [x**2 for x in range(1,5)]
        L = [x**2 for x in [1,2,3,4,5,6] if x <= 4]
    列表推导式嵌套：
      语法：
       [表达式1 for 变量1 in 可迭代对象1 (if 条件表达式1)\
        表达式2 for 变量2 in 可迭代对象2 (if 条件表达式2)]
      示例：
        # 将列表[2, 3, 5]中的元素与列表[7, 11, 13]的元素分别相乘，将得到的元素放与一个列表中
        L = [x*y for x in [1,2,3] for y in [4,5,6]]
序列(Sequence)：
    字符串  str
    列表    list
    元组    tuple

pyton3中常用的序列函数：
    len(x)  返回序列长度
    max(x)  返回序列的最大的元素
    min(x)  返回序列的最小的元素
    sum(x)  返回序列中所有元素的和
    any(x)  真值测试，如果列表中的一个值为真值，则返回True
    all(x)  真值测试，如果列表中所有值都为真值则返回True

练习：
    1、输入任意整数，先判断你输入的数是否为质数(只能被1和自身整除的数)，如果为质数，则加入到列表中，
       再次输入任意正数，在判断...，直至输入的数小于等于0为止，最后打印您输入的质数。
    2、生成前40个斐波那契数：1 1 2 3 4 8
       要求将这些数保存在列表中，最后打印这些数，用while for，序列
    3、完全数：指出自身以外的所有的因数相加之和等于自身的数
       1 + 2 + 3 = 6
       1,2,3都为6的因数
       能被一个数x整除的数为y，则y为x的因数，求4~5个完全数并打印出来
       答案前三个:6,28,496
