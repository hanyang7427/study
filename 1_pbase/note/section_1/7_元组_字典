列表和字符串的比较：
    1、都是序列，有先后顺序
    2、列表可变，字符串不可变
    3、列表可以存储任意类型的数据，字符串只能存储字符

字符串的文本解析方法：
    s.split(sep=None)       将字符串s分割为字符串列表
    s.join(iterable)        将可迭代对象进行拼接，中间字符串进行分隔
    例：
      s = "welcome to tarena"
      s.split(" ")          # ['welcome', 'to', 'china']

元组tuple：
    元组是不可改变的序列，元组可以存储任意类型的值
    表示方法：
      用小括号()括起来，单个元素括起来加逗号(,)来区分是单个对象还是元组
    创建元组：
      t = ()        # 空元组
      t = tuple()
      t = (20,)     # 单元素元组
      t = 10,
      t = 1, 2, 3
    错误示例：
      t = (20)          # t绑定了整型数20
      # 序列赋值（变量的个数等于序列中元素的个数）
      x, y = 100, 200   # x绑定100，y绑定200
      x, y = (100, 200)
      x, y = [100, 200]
      x, y = "AB"
    构造(生成)函数：
      tuple()           # 生成一个空元组，等同于()
      tuple(iterable)   # 用可迭代对象生成一个元组
    元组的运算：
      算数运算：
        + += * *=
        +   拼接
        +=  拼接后绑定到变量
        *   生成重复的元组
        *=  生成重复元组后绑定变量
      例：
        x = (1, 2, 3) + (4, 5, 6)
        x += (7,)
      比较运算：
        > >= < <= == !=
      元组的in / not in：
        同字符串和列表，用于判断一个对象是否存在于元组中
      索引(index)：
        等同于字符串的索引规则，元组不能索引赋值
      切片(slice)：
        等同于字符串的切片规则，元组不能切片赋值
    元组的方法：
      t.index(v[,begin[,end]])  返回对应圆度的索引下标，begin为开始索引，end为结束索引(不含end)
      t.count()                 返回元组中对应元素的个数 

可用于序列的函数总结：
    len(), max(), min(), sum(), any(), all()
    reversed()                                  # 生成反向顺序的迭代器，与序列的reverse()不同
    sorted(iterable, key=None, reverse=False)   # 返回已排序列表
      注：key是一个函数,将iterable中的元素依次传给key指定的函数，以返回的结果为依据排序
    技巧：反向打印，生成反向列表，生成排好序的字符串
      # 反向打印
      s = 'ABC'
      for i in reversed(s):
          print(i)
      
      # 生成反向列表
      L = [100, 200, 300]
      L2 = [x for x in reversed(L)]

      # 生成排好序的字符串
      s = "AMCBJ"
      ''.join(sorted(s))
练习：
    1、输入任意一个字符串或数字，判断是否为回文
       12321
       ABCDCBA
       abeeba
    2、输入一个数，计算并打印每个数字出现的个数
       输入：2234524
       打印：2出现3次，3出现1次，4出现2次，5出现1次

字典dict：
    字典是一种可变的容器，可以存储任意类型的数据
    字典当中每一个数据都是用"键"(key)进行索引的，不像序列可以用下表进行索引
    字典中的数据没有先后关系，字典的存储是无序的
    字典的数据是以键(key)-值(value)对的形式进行存储的
    字典的键不能重复，随机去掉重复的键
    表示方式：
      以{}括起来，以冒号分割的键值对，各键值对之间用逗号分隔开
    例：
      {"name": "zs", "age": "eighteen"}
    创建空字典：
      d = {}
      d = dict()
    字典的值(value)可以为任意类型：
      字典的值可以是布尔值，数据，字符串，None，列表，元组，字典，集合，函数，类对象等所有类型
      例：
        {'a': [1,2,3]}
        {'a': (1,2,3)}
        {'a': {'aa': 11}}
        {(1970,1,1): "computer year"}   # 合法，键名是不可变类型
    字典的键(key)必须为不可变类型：
      None，布尔，int，cmplex，str，tuple，frozenset
    不能作为键的数据类型：
      列表，字典，集合
    字典的基本操作：
      字典的访问：
        用方括号[]运算符访问字典内的成员
        dict[key]
        例：
          d = {"name": "tarena", "age": 15}
          print("姓名：", d["name"], "年龄：", d["age"])
      添加/修改字典的元素：
        字典[key] = value
        例：
          d = {}
          d['name'] = 'tarena'      # 创建新的键值对
          d['name'] = 'sz'          # 修改键对应的值
        键不存在时，创建键，并绑定键对应的值
        键存在时，修改键绑定的值
      删除字典元素：
        del dict[key]
        例：
          del d['age']              # 删除年龄和对应的值
      获取字典中元素个数的函数：
        语法：
          len(dict)
      字典的成员资格判断in / not in运算符：
        判断一个键是否存在于字典中，如果存在返回True，否则返回False
        例：
          d = ['name': 'tarena', 'age': 15]
          'name' in d       # True
          'tarena' in d     # False
    字典的生成函数：
      dict()            生成一个字典，等同于{}
      dict(iterable)    用可迭代对象初始化一个字典
      dict(**kwargs)    关键字参数形式生成一个字典
      例：
        d = dict()
        d = dict([('name', 'tarena'), ('age', 15)])
        d = dict(name='tarena', age=16)
    字典的方法：
      d.clear()             清空字典
      d.pop(key)            移除键，同时返回此键所对应的值
      d.copy                返回字典d的副本，只复制一层(浅拷贝)
      d.update(d2)          将字典d2合并到d中，如果键相同，则此键的值取d2的值作为键值
      d.get(key, default)   返回键所对应的值，如果没有此键则返回default
      d.keys()              返回可迭代的dict_keys集合对象
      d.values()            返回可迭代的dict_values值对象
      d.items()             返回可迭代的dict_item对象
    字典推导式：
      语法：
        { 键表达式 : 只表达式 for 变量 in 可迭代对象 (if条件表达式) }
      技巧：等长列表生成字典
        numbers = [1001, 1002, 1003, 1004]
        names = ["Tom", "Jerry", "Spike", "Tyke"]
        animails = { numbers[i] : names[i] for i in range(4)}
        animails = { numbers[i] : names[i] for i in range(4) if numbers[i] % 2 == 0 }
    字典是可迭代对象：
      # 只输出key，不输出value
      for i in {"name":"tarena","age":15}:
        print(i)
      # 想要输出value需要使用items()方法
      for i in {"name":"tarena","age":15}.items():
        print i
    字典的基本函数操作：
      len()       返回字典的长度
      max()       返回字典的键的最大值
      min()       返回字典的键的最小值
      sum()       返回字典中所有键的和
      any()       键真值测试
      all()       所有键真值测试
练习：
    1、输入5个学生的姓名和年龄，每个学生的信息形成字典后，存入列表中
       内部存储格式：
         [{"name":"aaa" , "age":20}, \
          {"name":"bbb" , "age":30}, ...]
       输入完成后，打印所有学生信息如下：
       +----------+----------+
       |    姓名  |   年龄   |
       +----------+----------+
       |    aa    |    20    |
       |    bb    |    30    |
       |    ..    |    ..    |
       +----------+----------+
    2、输入学生年龄，把低于此年龄学生信息打印出来
       知识点：
         列表和字典组合使用
