       布尔运算：
    not and or
    not运算符：
      作用：
        逻辑取反
      语法：
        not 条件表达式
      例子：
        not True              # False
        not 100               # False 相当于not bool(100)
        not 0.0               # True
        not 0j                # True
        not ''                # True
        not 'False'           # False
        not None              # True
        not False             # True
    and运算符：
      作用：
        返回优先为假的对象(注意是对象不是True/False)
      语法：
        表达式1 and 表达式2
      例子：
        0 and 100             # 返回100
        100 and 200           # 返回200
        200 and 100           # 返回100
      说明：
        当表达式1的布尔测试值为True时，返回表达式2，否则返回表达式1
    or运算符：
      作用：
        优先返回值为真的对象(注意是对象不是True/False)
      语法：
        表达式1 or 表达式2
      例子：
        0 or 100              # 返回100
        0.0 and 0             # 返回0.0
        1.1 and 2.2           # 返回1.1
正负号运算符：
    +(正号) -(负号)
      语法：
        + 表达式
        - 表达式
      说明：
        一元运算符(只有1边有表达式)
位运算：
    运算符：
      &  位与
      |  位或
      ^  位异或
      << 左移
      >> 右移
      ~  取反
    & 位与：&(and)
      语法：
        表达式x & 表达式y
      作用：
        按位操作，两个对应的位都位1，则结果为1，两个对应的位只要有一个为0，则结果为0
    | 位或：
      语法：
        表达式x | 表达式y
      作用：
        按位操作，两个对应的位只有有一个为1，则结果为1，两个对应的位都为0，则结果为0
    ^ 位异或
      语法：
        表达式x ^ 表达式y
      作用：
        按位操作，两个对应的位不同，结果为1，两个对应的位相同，结果为0
    << 左移运算
      语法：
        表达式x << 整数表达式y
      作用：
        将x的二进制值按位向左移动y位，低位补0
      例子：
        >>> bin(0b001 << 1)
        '0b10'
      规律：
        x  << y == x * 2 ** y
    >> 右移
      语法：
        表达式 >> 正数表达式y
      作用：
        将x的二进制值按位向右移动y位，低位溢出丢弃，高位补0
    ~ 按位取反
      语法：
        ~ 表达式
      作用：
        将数据二进制的相应位取反

bin(x)函数：
    语法：
      bin(x)
    作用：
      将x转换为二进制(binary)的字符串
hex(x)函数：
    语法：
      hex(x)
    作用：
      将一个整数转为16进制的字符串

练习：
    IP = 0xC0a80164         # IP地址：192.168.1.100
    MASK = 0xFFFFFF00       # 子网掩码：255.255.255.0
    求：IP & MASK的值       # 网络地址
    求：IP | ~MASK的值      # 广播地址

字符串 str(string)：
    作用：
      用来记录文本信息（字符信息）
    字符串的表示方法：
      '     单引号
      "     双引号
      '''   三单引号(可见即所得)
      """   三双引号
      凡是用上述字符开头相同字符结尾的表达式都为字符串
    非空字符串的表示方式：
      'hello' == '''hello''' == "hello" == '''hello'''
    非空字符串的表示方式：
      '' == "" == '''''' == """""
    注意：
      空字符串的布尔测试值bool()为False
    单引号和双引号的区别：
      单引号内可以包含双引号
      双引号内可以包含单引号
      例子：
      s = "I'm a teacher"
      s2 = 'My name is "abc"'
    注意：
      三双引和三单引中的换行可以直接print出来，单引和双引不行
      s = '''I'm a teacher,
      my name is "abc" '''

用转义序列代表特殊字符：
    字符串常量中用字符反斜杠\后跟一些字符代表特殊的含义:
      \'  单个引号      \"  单个双引号          \n  换行
      \a  响铃          \r  返回光标至行首      \f  换页
      \t  水平制表符    \v  垂直制表符          \b  倒退光标
      \0  空字符(字符的编码值为0)
      \0xx  两位八进制表示的字符
      \xXX  两位十六进制表示的字符
      \uXXXX Unicode16位二进制 的十六进制字符
      \UXXXXXXXX  Unicode32位二进制 的十六进制字符
ASCII编码：
    $ man ascii<回车>
常用的ASCII编码：
    字符    十进制  十六进制
    '0'     48      0x30
    'A'     65      0x41
    'a'     97      0x61
编码：
    0 ~ 127     2**7 = 128
    1字节表示   0 ~ 2**8 -1 (0~255)
    2字节表示   0 ~ 2**16-1 (0~65535)
    4字节表示   0 ~ 2**32-1 (40亿)

    python3使用Unicode作用内部编码
      print('abcd')
      print('\x61\x62\x63\x64')           # '\x' 表示后边跟的是2位16进制
      print('\u0061\u0062')               # '\u' 表示后边跟的是4位16进制(Unicode16)
      print('\U00000061\U00000062')       # '\U' 表示后边跟的是8位16进制(Unicode32)
      print('中文')
      print('\u4e2d\u6587')               #

    Unicode 16(两字节表示法)：
      'A'   0x00A1

    ascii       单字节编码(8bit     2**8)
    unicode16   双字节编码(16bit    2**16)
    unicode32   四字节编码(32bit    2**32)

len(函数)：
    语法：
      len(s)
    作用：
      返回字符串中字符的个数
raw 字符串(原始字符串)：
    格式：
      r'字符串内容'
      r"字符串内容"
      r'''字符串内容'''
      r"""字符串内容"""
    作用：
      让转义字符 \ 无效
    例子：
      print(r'\t')输出\t
      r'\t'和'\\t'相同

隐式字符串拼接：
    x = "I'm"       ' a "teacher".'     """hello!"""
字符串的运算：
    +   +=  *   *=  >   >=  <   <=  ==  !=
    + 加号运算符用户拼接字符串：
      例如：
        x = 'a' ; y = 'b' ; z = x + y
        print(z)        # 输出ab
    += 运算符原字符串与右侧字符串拼接生成新的字符串关联到原变量
      例如：
        x = 'a' ; y = 'b' ; x += y
        print(x)        # 输出ab(x = x + y)
    * 生成重复的字符串：
      格式：
        字符串 * 整型表达式
      例子：
        x = "ab" * 3  # ababab
    *= 生成重复的字符串并改变变量的关联关系
      例子：
        x = '123' ; x *= 4
        print(x)        # 输出123123123123

      字符串的比较：
        > >= < <= == !=
        例子：
          'A'   < 'b'        # True(解码后比较数值)
          'ABC' > 'ABB'      # True(一个一个比'A'='A' 'B'='B' 'C'>'B')
          'AD'  > 'ABC'      # True(前边的大就大，后边的不在比较)
          'AB'  < 'ABC'      # True(少一位相当与没有，没有小)
          'ABC' !== 'abc'    # True

in & not in 运算符：
    作用：
      in 用于序列，字典，集合中，用于判断某个值是否存在于对象中
      not in的返回值与in相反
    例子：
      x = 'welcome to tarena!'
      if 'to' in x:
          print("'to'在x字符串中")

python运算符的优先级：
    运算符                      描述
    **                          指数(最高优先级)
    ~ + -                       位反转，一元加号(正号)，一元减号(减号)
    * / // %                    乘，除，地板除，求余
    + -                         加，减
    << >>                       位左移，位右移
    & |                         位与，位或
    ^                           位异或
    < <= > >=                   小于，小于等于，大于，大于等于
    == !=                       等于，不等于
    = %= /= //= -= += *= **=    复合赋值运算符
    is, is not                  身份运算符(两个变量是否绑定同一个对象)
    in, not in                  成员运算符
    not, or, and                逻辑运算符

练习1：
    用 字符串 * 运算符打印三角形，要求输入一个整数，此整数代表此三角形离左侧整数个字符
练习2：
    输入三行文字，让这三行文字在一个方框内居中显示，如输入(不要输入中文)：
    显示结果如下：
    +--------------------------+
    |       hellp tarena!      |
    | My name is xxxxxxxxxxxx! |
    |         good-bye         |
    +--------------------------+
