集合set：
    集合[无重复数据]，[无序]，[存储不可变对象]的[可变容器]
    生成集合：
      set()             空集合
      set(iterable)     非空集合
    注意：空集合不是'{}'，而是'set()'
    无序指：存入无序，存入完成后，取值是有序的
      s1 = set("123") ; print(s1)
      {'2', '3', '1'}
      退出重新执行
      s1 = set("123") ; print(s1)
      {'3', '2', '1'}
    例：
      set('abccba')                     # 去重      {"a", "b", "c"}
      set({"name":"tarena","age":15})   # 只留下key {"name", "age"}
    集合的运算：
      交集，并集，补集，子集，超集
      A =  1  2  3 
      B =     2  3  4
      C =  1 
      交集       -> 2 3
      并集       -> 1 2 3 4
      补集 A - B -> 1
           B - A -> 4
      子集 C被A包含，C是A的子集
           A包含C，A是C的超集
    运算符：
      - | & ^ > >= < <= == !=
      {1,2,3} - {1}     == {2,3}        # 补集"-"
      {1,2,3} | {2,3,4} == {1,2,3,4}    # 并集"|"
      {1,2,3} & {2,3,4} == {2,3}        # 交集"&"
      A ^ B == (A-B) | (B-A)            # 对称补集(补集并起来)
      
      >     判断一个集合是另一个集合的超集
      <     判断一个集合是另一个集合的子集
      {1,2,3} > {1}         # True
      {2} < {1,2,3}         # True
      {1,2,3} == {3,2,1}    # True
      {1,2} != {2,1}        # False
    in / not in：
      等同于字典中的in/not in，判断某个值是否存在于集合中
    
    集合常用的方法：
      set1.add(e)                  在集合中添加一个新元素，如果元素已经存在则不添加
      set1.clear()                 清空集合内所有的元素
      set1.copy()                  复制集合(浅拷贝)
      set1.difference(s2)          等同于s - s2
      set1.difference_update(s2)   等同于s=s-s2
      set1.discard(digit)          从集合s 从集合s中移除一个数字，如果digit不是数字，则什么都不做
      set1.intersection(s2)        等同于s & s2
      set1.intersection_update     等同于s = s & s2
      set1.union(s2)               等同于s | s2
      set1.issubset(s2)            如果s为s2的子集返回True，否则返回False，等同于s <= s2
      set1.pop()                   从集合中删除一个随机元素
      set1.remove(e)               从集合中删除一个元素，如果元素不存在则会产生一个KeyError错误
      set1.update(s2)              等同于s = s | s2
    集合的函数：
      len(), max(), min(), sum(), any(), all()
    集合推导式：
      语法：
        { 表达式 for 变量 in 可迭代对象 (if 条件表达式) }
      例：
        { x for x in [1,2,3] }
            print(x)
    集合是可迭代对象：
      例：
        for i in {"a","b","c"}:
            print(i)
固定集合forzenset：
    创建一个不可变的，无序的，含有唯一元素的集合
    forzenset()             # 空固定集合
    forzenset(iterable)     # 非空固定集合
    例：
      f = forzenset([1,3,5,7,9])
    运算：
      交 并 补 对称补 in /not in > >= < <= == !=
      frozenset()的运算等同于set()当中的运算
    固定集合的方法：
      {集合的全部方法} - {能修改集合的方法}
    注意：
      由于frozenset不可变，所以可以作为字典的key

linux输入重定向：
    $ 命令 < 输入文件
    将文件中的内容重定向为一个命令的输入

练习：
    1、集合输入输出
       模拟点名系统，已知全班名单，随机打印学生的姓名进行点名，并得到此学生是否已到，输入'y'代表已
       到输入'n'代表未到，单名完成后，打印未到者名单
    2、假设一个列表有很多数据，还有重复的，例如：
       L = [9, 8, 6, 6, 7, 8, 9, ...]
       打印出列表中的数据，要求重复的只打印一次，打印的顺序以列表中第一次出现的顺序为准
       提示：列表和集合组合使用

总结：
    列表，字典，元组，集合都为可迭代对象，字典迭代的是键(key)
    字典中的key必须为不可变类型(例如key不能为列表)
    集合中的所有元素必须为不可变类型
    集合是无序，所以不能用下标进行取值
    list(),[],[列表推导式],[1,2,3],list(iterable)
    tuple(),(),(元组推导式return generator),(1,2,3),tuple(iterable)
    dict{},{},{字典推导式},(1:1,2:2),dict(iterable成对儿),dict{"n"="t","a"=15},可变对象不能作key
    set(),{集合推导式},{1,2,3},set(iterable),不能存储可变对象(提示unhashable)
    forzenset(),固定集合,可以作为字典的键,可以作为集合的值
